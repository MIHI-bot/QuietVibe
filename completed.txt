EXTRA FUNCTIONALITY DETETCED SO FAR WHICH HAS BEEN NOT IMPLEMENTED YET(INCLUDING FOLDERS FILE FEAUTES COMPONETS OR WHATEVER)
- Webhook Clerk [C:\Users\HP\Desktop\threads-main\app\api\webhook\clerk]
- menubar,select,toast,toaster,use-toast UI in [C:\Users\HP\Desktop\threads-main\components\ui]


- Clerk,
- shadCN
- vercel,
- Schema,
- promises,
- e.target,
- async/await,
- NextJs Layout,
- File Structure,
- documentations,
- remote patterns,
- next/Navigations,
- callback Functions
- uploadthing website,
- Zod (for validation),
- swix[for webhooks exi],
- NextJs 13 Tags(<Image/>),
- PostCss language Support,
- [npm outdated, npm run dev],
- "user client" & "use server",
- text-subtle-medium[some css class],
- 'NextJs supports File Base Routing',
- thinking about the resposiveness right from the git go,
- Clerk Components(SignedIn, Organization Switcher,currentUser),
- also add a percentage value, showing how much u have learnt from Tutorial & how much from experiences, debug, manual setup, error and all, hope u r getting
- Dynamic routing in NextJs[u can pass variables to ur folder name and will display related values on the search url when searched or u can say, values will be displayed on the URL ]

YOUR FEATURES: 
- Real Time Chat App Use the following chat for help: https://grok.com/chat/f1971e8c-eb42-45eb-b683-0be6c9509517
- SKELETON LOADING [DONE]
- GIVING UPVOTES AND DOWNVOTES ON THE COMMENT
- BLOCKING USERS: AUTOMATIC(more details below ) AND MANUAL BY OTHER USER
- AUTOMATICALLY BLOCK USER IF GOT MORE THAN 10 DOWNVOTES on no upvote
- AUTOMATICALLY DELETE USER, IF NOT ACTIVE ON THE APPLICATION FOR MORE THAN 7 DAYS 


YOUR QUESTIONS:
- refer
- exec()
- async functions
- populate() function
- SSR 
- multiLevel commenting FUNCTIONALITY


YOUR BIZ IDEAS
-
-
-

WHAT DIDNT WORK
- Reply function on a comment in Comment.tsx page, what problem occuring is even on submitting the comment, the comment replied is not showing in the database but the code seems workign as the the form.reset() function got worked.

CHANGES MADE IN DEFAULT FILES
- #changes at node modules> clerk > nextJs> dist > types > index.d.ts
- I have changed frocly  const user = await currentUser; from  const user = await currentUser(); in app>root>{folders>page.tsx}

REQUIRED THINGS TO INSTALL:
- WATCH FROM 3:55:45(U GOTTA INSTALL FOR TAB, CHECK WHETHER U HAVE INSTALLED IT PROPERLY OR NOT !!) 























it was ctrl + X from auth/(root)/page.ts...idk why it was there.[Code 1]
// File: C:\Users\HP\Desktop\threads\app\page.tsx
import * as entry from '../../../app/(root)/page.jsx'
import type { ResolvingMetadata, ResolvingViewport } from 'next/dist/lib/metadata/types/metadata-interface.js'

type TEntry = typeof import('../../../app/(root)/page.jsx')

// Check that the entry is a valid entry
checkFields<Diff<{
  default: Function
  config?: {}
  generateStaticParams?: Function
  revalidate?: RevalidateRange<TEntry> | false
  dynamic?: 'auto' | 'force-dynamic' | 'error' | 'force-static'
  dynamicParams?: boolean
  fetchCache?: 'auto' | 'force-no-store' | 'only-no-store' | 'default-no-store' | 'default-cache' | 'only-cache' | 'force-cache'
  preferredRegion?: 'auto' | 'global' | 'home' | string | string[]
  runtime?: 'nodejs' | 'experimental-edge' | 'edge'
  maxDuration?: number
  
  metadata?: any
  generateMetadata?: Function
  viewport?: any
  generateViewport?: Function
  
}, TEntry, ''>>()

// Check the prop type of the entry function
checkFields<Diff<PageProps, FirstArg<TEntry['default']>, 'default'>>()

// Check the arguments and return type of the generateMetadata function
if ('generateMetadata' in entry) {
  checkFields<Diff<PageProps, FirstArg<MaybeField<TEntry, 'generateMetadata'>>, 'generateMetadata'>>()
  checkFields<Diff<ResolvingMetadata, SecondArg<MaybeField<TEntry, 'generateMetadata'>>, 'generateMetadata'>>()
}

// Check the arguments and return type of the generateViewport function
if ('generateViewport' in entry) {
  checkFields<Diff<PageProps, FirstArg<MaybeField<TEntry, 'generateViewport'>>, 'generateViewport'>>()
  checkFields<Diff<ResolvingViewport, SecondArg<MaybeField<TEntry, 'generateViewport'>>, 'generateViewport'>>()
}

// Check the arguments and return type of the generateStaticParams function
if ('generateStaticParams' in entry) {
  checkFields<Diff<{ params: PageParams }, FirstArg<MaybeField<TEntry, 'generateStaticParams'>>, 'generateStaticParams'>>()
  checkFields<Diff<{ __tag__: 'generateStaticParams', __return_type__: any[] | Promise<any[]> }, { __tag__: 'generateStaticParams', __return_type__: ReturnType<MaybeField<TEntry, 'generateStaticParams'>> }>>()
}

type PageParams = any
export interface PageProps {
  params?: any
  searchParams?: any
}
export interface LayoutProps {
  children?: React.ReactNode

  params?: any
}

// =============
// Utility types
type RevalidateRange<T> = T extends { revalidate: any } ? NonNegative<T['revalidate']> : never

// If T is unknown or any, it will be an empty {} type. Otherwise, it will be the same as Omit<T, keyof Base>.
type OmitWithTag<T, K extends keyof any, _M> = Omit<T, K>
type Diff<Base, T extends Base, Message extends string = ''> = 0 extends (1 & T) ? {} : OmitWithTag<T, keyof Base, Message>

type FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never
type SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never
type MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never



function checkFields<_ extends { [k in keyof any]: never }>() {}

// https://github.com/sindresorhus/type-fest
type Numeric = number | bigint
type Zero = 0 | 0n
type Negative<T extends Numeric> = T extends Zero ? never : `${T}` extends `-${string}` ? T : never
type NonNegative<T extends Numeric> = T extends Zero ? T : Negative<T> extends never ? T : '__invalid_negative_number__'
Code 1, closed--------------------------------------------------------------------------------------------------------------------------------------------------
